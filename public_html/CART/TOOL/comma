#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [+<n>h] [-4] <f1> <f2> ... <file>
	        : ${0##*/} -d[4] <string>
	Version : Fri Jun 27 01:03:49 JST 2014
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
__USAGE
  exit 1
}

# initialize
PATH='/usr/bin:/bin'
directmode=0
directstr=''
awkc0=''
file=''
fldnums=''
all_fields=0
use_stdin=0
opt_part=1
digits=3
hopt=0

# parse the arguments
i=0
for arg in "$@"; do
  i=$((i+1))
  fldnum=''
  # direct mode processing
  if   [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-d'        \) ]; then
    directmode=1
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-d4'       \) ]; then
    directmode=1
    digits=4
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-4d'       \) ]; then
    directmode=1
    digits=4
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-4'        \) ]; then
    digits=4
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" != "_${arg#+}" \) ]; then
    s=$(echo "_$arg" | sed 's/^_+\([0-9]*\)h$/\1/')
    [ "_$s" != "_$arg" ] || print_usage_and_exit
    [ -z "$s"          ] && { hopt=1; continue; }
    hopt=$(expr $s + 0)
    continue
  fi
  opt_part=0
  if [ \( $i -eq $# \) -a \( $directmode -ne 0 \) ]; then
    directstr=$arg
    break
  fi
  # separate arg to arg1, arg2
  arg1=${arg%%/*}
  arg2=${arg##*/}
  if [ \( "_${arg1}/${arg2}" = "_$arg"   \) -a \
       \( -n "$arg1" \) -a \( -n "$arg2" \)    ]
  then
    :
  else
    arg1=$arg
    arg2=''
  fi
  # check both
  j=0
  for s in $arg1 $arg2; do
    if echo "_$s" | grep '^_[0-9]\{1,\}$' > /dev/null; then
      j=$((j+1))
      if [ "$s" -eq 0 ]; then
        all_fields=1
      fi
    elif echo "_$s" | grep -E '^_(NF|NF-[0-9]+)$' > /dev/null; then
      j=$((j+1))
    fi
  done
  if [ \( $j -eq 2 \) -o \( \( $j -eq 1 \) -a \( -z "$arg2" \) \) ]; then
    fldnums="$fldnums $arg"
    continue
  fi
  # perhaps, this argument is a filename
  if [ $# -eq $i ]; then
    file=$arg
    continue
  fi
  # otherwise, it is a invalid argument
  print_usage_and_exit
done
[ -n "$fldnums" ] || print_usage_and_exit
if [ $directmode -ne 0 ]; then
  [ -n "$directstr" ] || print_usage_and_exit
  file=''
else
  [ -n "$file" ] || file='-'
  if [ \( "_$file" = '_-'               \) -o \
       \( "_$file" = '_/dev/stdin'      \) -o \
       \( "_$file" = '_/dev/fd/0'       \) -o \
       \( "_$file" = '_/proc/self/fd/0' \)    ]
  then
    use_stdin=$((use_stdin+1))
  fi
  if [ \( ! -f "$file"     \) -a \
       \( ! -c "$file"     \) -a \
       \( ! -p "$file"     \) -a \
       \( "_$file" != '_-' \)    ]
  then
    print_usage_and_exit
  elif [ \( ! -r "$file" \) -a \( "_$file" != '_-' \) ]; then
    echo "${0##*/}: Cannot open the file" 1>&2
    exit 1
  fi
fi

# make the part of the awk code
if [ $all_fields -eq 0 ]; then
  awkc0=$(echo "$fldnums"                           |
          sed 's/^0\{1,\}\([0-9]\)/\1/'             |
          sed 's/\([^0-9]\)0\{1,\}\([0-9]\)/\1\2/g' |
          tr ' ' '\n'                               |
          awk                                       '
            /^NF-[0-9]+\/NF-[0-9]+$/ {
              nfofs1 = substr($0,4,index($0,"/")-4) + 0;
              nfofs2 = substr($0,index($0,"/")+4) + 0;
              if (nfofs1 > nfofs2) {
                i = nfofs1;
                nfofs1 = nfofs2;
                nfofs2 = i;
              }
              for (i=nfofs1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^NF\/NF-[0-9]+$/ {
              nfofs2 = substr($0,index($0,"/")+4);
              print "0 NF";
              for (i=1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^NF-[0-9]+\/NF$/ {
              nfofs2 = substr($0,4,index($0,"/")-4) + 0;
              print "0 NF";
              for (i=1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^[0-9]+\/NF-[0-9]+$/ {
              printf("0 %s NF-%s\n",
                     substr($0,1,index($0,"/")-1),
                     substr($0,index($0,"/")+4)   );
            }
            /^NF-[0-9]+\/[0-9]+$/ {
              printf("0 %s NF-%s\n",
                     substr($0,index($0,"/")+1),
                     substr($0,4,index($0,"/")-4));
            }
            /^[0-9]+\/[0-9]+$/ {
              pos = index($0, "/");
              a = substr($0, 1, pos-1)+0;
              b = substr($0, pos+1)+0;
              if (a > b) {
                swp = a;
                a = b;
                b = swp;
              }
              for (i=a; i<=b; i++) {
                print 1, i;
              }
            }
            /^[0-9]+\/NF$/ {
              print 1, substr($0, 1, length($0)-3), "NF";
            }
            /^NF\/[0-9]+$/ {
              print 1, substr($0, index($0,"/")+1), "NF";
            }
            /^[0-9]+$/ {
              print 1, $0;
            }
            /^NF-[0-9]+$/ {
              print 0, $0;
            }
            (($0 == "NF") || ($0 == "NF/NF")) {
              print 0, "NF";
            }
          '                                         |
          sort -k 1,1 -k 2n,2 -k 3n,3               |
          uniq                                      |
          sed -n '1,/1 [0-9]\{1,\} NF$/p'           |
          awk                                       '
            BEGIN {
              f1_total  = 0;
              f2_max    = 0;
              f3_has_nf = 0;
            }
            {
              f1_total += $1; 
              if ($1 == 1) {
                f2_max = ($2 > f2_max) ? $2 : f2_max;
                f2_vals[$2] = 1;
              }
              f3_has_nf = ($3 == "NF") ? 1 : f3_has_nf;
              cell[NR,1] = $2;
              if (NF == 3) {
                cell[NR,2] = $3;
              }
            }
            END {
              if ((f1_total == NR) && (f3_has_nf)) {
                printf("split(\"\",mark);for(i=1;i<=NF;i++){mark[i]=1}");
                for (i=1; i<f2_max; i++) {
                  if (! (i in f2_vals)) {
                    printf("delete mark[%d];", i);
                  }
                }
              } else {
                printf("split(\"\",mark);");
                for (i=1; i<=NR; i++) {
                  if (i SUBSEP 2 in cell) {
                    printf("if(%s>%s){for(i=%s;i<=%s;i++){mark[i]=1}}else{for(i=%s;i<=%s;i++){mark[i]=1}}",
                           cell[i,1],cell[i,2],
                           cell[i,2],cell[i,1],
                           cell[i,1],cell[i,2]);
                  } else {
                    if (match(cell[i,1],/^[0-9]+$/) || (cell[i,1] == "NF")) {
                      printf("mark[%s]=1;",cell[i,1]);
                    } else {
                      printf("if(%s>0){mark[%s]=1}",cell[i,1],cell[i,1]);
                    }
                  }
                }
              }
              printf("convert_marked_flds();print;");
            }
          '                                         )
  echo "$awkc0" | grep 'NF' >/dev/null
  if [ $? -ne 0 ]; then
    awkc0b=${awkc0%convert_marked_flds*}
    awkc0='convert_marked_flds();print;'
  else
    awkc0b=''
  fi
else
  awkc0='split("",mark);for(i=1;i<=NF;i++){mark[i]=1}convert_marked_flds();print;'
  awkc0b=''
fi

# make awk code
awkcode='
BEGIN {
  for (i=0; i<hdr_skip; i++) {
    if (getline line) {
      print line;
    } else {
      exit;
    }
  }
  '"$awkc0b"'
}
{
  '"$awkc0"'
}
function convert_marked_flds( fld) {
  for (fld in mark) {
    $fld = insert_comma($fld);
  }
}
function insert_comma(str, a,bc,b,c,i,j,comma_b) {
  if (! match(str, /^[+-]?[0-9]+(\.[0-9]*)?$/)) { return str; }
  if (match(str, /^[+-]/)) {
    a  = substr(str, 1, 1);
    bc = substr(str, 2   );
  } else {
    a  = "";
    bc = str;
  }
  i = index(bc, ".");
  if (i != 0) {
    b = substr(bc, 1, i-1);
    c = substr(bc, i     );
  } else {
    b = bc;
    c = "";
  }
  i = length(b);
  if (i <= comma_digits) { return str; }
  j = ((i+comma_digits-1)%comma_digits)+1;
  comma_b = substr(b, 1, j);
  for (j++; j<i; j+=comma_digits) {
    comma_b = comma_b "," substr(b, j, comma_digits);
  }
  return a comma_b c;
}
'

# main
if [ $directmode -ne 0 ]; then
       printf '%s' "$directstr"                                 |
       awk -v hdr_skip=$hopt -v comma_digits=$digits "$awkcode"
else
  exec awk -v hdr_skip=$hopt -v comma_digits=$digits "$awkcode" "$file"
fi