#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [+<n>h] [-k] <f1> <f2> ... <file>
	        : ${0##*/} -d [-k] <string>
	Version : Sat Aug 16 15:47:24 JST 2014
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/UTF-8)
__USAGE
  exit 1
}

# initialize
PATH='/usr/bin:/bin'
directmode=0
directstr=''
kanaonly=''
awkc0=''
file=''
fldnums=''
all_fields=0
use_stdin=0
opt_part=1
hopt=0

# parse the arguments
if [ \( $# -eq 1 \) ]; then
  case $1 in
    -h|--help|--version) print_usage_and_exit;;
  esac
fi
i=0
for arg in "$@"; do
  i=$((i+1))
  fldnum=''
  # direct mode processing
  if   [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-d'        \) ]; then
    directmode=1
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-dk'       \) ]; then
    directmode=1
    kanaonly='#'
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-kd'       \) ]; then
    directmode=1
    kanaonly='#'
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" = '_-k'        \) ]; then
    kanaonly='#'
    continue
  elif [ \( $opt_part -ne 0 \) -a \( "_$arg" != "_${arg#+}" \) ]; then
    s=$(echo "_$arg" | sed 's/^_+\([0-9]*\)h$/\1/')
    [ "_$s" != "_$arg" ] || print_usage_and_exit
    [ -z "$s"          ] && { hopt=1; continue; }
    hopt=$(expr $s + 0)
    continue
  fi
  opt_part=0
  if [ \( $i -eq $# \) -a \( $directmode -ne 0 \) ]; then
    directstr=$arg
    break
  fi
  # separate arg to arg1, arg2
  arg1=${arg%%/*}
  arg2=${arg##*/}
  if [ \( "_${arg1}/${arg2}" = "_$arg"   \) -a \
       \( -n "$arg1" \) -a \( -n "$arg2" \)    ]
  then
    :
  else
    arg1=$arg
    arg2=''
  fi
  # check both
  j=0
  for s in $arg1 $arg2; do
    if echo "_$s" | grep '^_[0-9]\{1,\}$' > /dev/null; then
      j=$((j+1))
      if [ "$s" -eq 0 ]; then
        all_fields=1
      fi
    elif echo "_$s" | grep -E '^_(NF|NF-[0-9]+)$' > /dev/null; then
      j=$((j+1))
    fi
  done
  if [ \( $j -eq 2 \) -o \( \( $j -eq 1 \) -a \( -z "$arg2" \) \) ]; then
    fldnums="$fldnums $arg"
    continue
  fi
  # perhaps, this argument is a filename
  if [ $# -eq $i ]; then
    file=$arg
    continue
  fi
  # otherwise, it is a invalid argument
  print_usage_and_exit
done
# (if you want to regard no fldnums as all, set all_fields=1 instead of exit)
[ -n "$fldnums" ] || all_fields=1
if [ $directmode -ne 0 ]; then
  [ -n "$directstr" ] || print_usage_and_exit
  file=''
else
  [ -n "$file" ] || file='-'
  if [ \( "_$file" = '_-'               \) -o \
       \( "_$file" = '_/dev/stdin'      \) -o \
       \( "_$file" = '_/dev/fd/0'       \) -o \
       \( "_$file" = '_/proc/self/fd/0' \)    ]
  then
    use_stdin=$((use_stdin+1))
  fi
  if [ \( ! -f "$file"     \) -a \
       \( ! -c "$file"     \) -a \
       \( ! -p "$file"     \) -a \
       \( "_$file" != '_-' \)    ]
  then
    print_usage_and_exit
  elif [ \( ! -r "$file" \) -a \( "_$file" != '_-' \) ]; then
    echo "${0##*/}: Cannot open the file" 1>&2
    exit 1
  fi
fi

# make the part of the awk code
if [ $all_fields -eq 0 ]; then
  awkc0=$(echo "$fldnums"                           |
          sed 's/^0\{1,\}\([0-9]\)/\1/'             |
          sed 's/\([^0-9]\)0\{1,\}\([0-9]\)/\1\2/g' |
          tr ' ' '\n'                               |
          awk                                       '
            /^NF-[0-9]+\/NF-[0-9]+$/ {
              nfofs1 = substr($0,4,index($0,"/")-4) + 0;
              nfofs2 = substr($0,index($0,"/")+4) + 0;
              if (nfofs1 > nfofs2) {
                i = nfofs1;
                nfofs1 = nfofs2;
                nfofs2 = i;
              }
              for (i=nfofs1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^NF\/NF-[0-9]+$/ {
              nfofs2 = substr($0,index($0,"/")+4);
              print "0 NF";
              for (i=1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^NF-[0-9]+\/NF$/ {
              nfofs2 = substr($0,4,index($0,"/")-4) + 0;
              print "0 NF";
              for (i=1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^[0-9]+\/NF-[0-9]+$/ {
              printf("0 %s NF-%s\n",
                     substr($0,1,index($0,"/")-1),
                     substr($0,index($0,"/")+4)   );
            }
            /^NF-[0-9]+\/[0-9]+$/ {
              printf("0 %s NF-%s\n",
                     substr($0,index($0,"/")+1),
                     substr($0,4,index($0,"/")-4));
            }
            /^[0-9]+\/[0-9]+$/ {
              pos = index($0, "/");
              a = substr($0, 1, pos-1)+0;
              b = substr($0, pos+1)+0;
              if (a > b) {
                swp = a;
                a = b;
                b = swp;
              }
              for (i=a; i<=b; i++) {
                print 1, i;
              }
            }
            /^[0-9]+\/NF$/ {
              print 1, substr($0, 1, length($0)-3), "NF";
            }
            /^NF\/[0-9]+$/ {
              print 1, substr($0, index($0,"/")+1), "NF";
            }
            /^[0-9]+$/ {
              print 1, $0;
            }
            /^NF-[0-9]+$/ {
              print 0, $0;
            }
            (($0 == "NF") || ($0 == "NF/NF")) {
              print 0, "NF";
            }
          '                                         |
          sort -k 1,1 -k 2n,2 -k 3n,3               |
          uniq                                      |
          sed -n '1,/1 [0-9]\{1,\} NF$/p'           |
          awk                                       '
            BEGIN {
              f1_total  = 0;
              f2_max    = 0;
              f3_has_nf = 0;
            }
            {
              f1_total += $1; 
              if ($1 == 1) {
                f2_max = ($2 > f2_max) ? $2 : f2_max;
                f2_vals[$2] = 1;
              }
              f3_has_nf = ($3 == "NF") ? 1 : f3_has_nf;
              cell[NR,1] = $2;
              if (NF == 3) {
                cell[NR,2] = $3;
              }
            }
            END {
              if ((f1_total == NR) && (f3_has_nf)) {
                printf("split(\"\",mark);for(i=1;i<=NF;i++){mark[i]=1}");
                for (i=1; i<f2_max; i++) {
                  if (! (i in f2_vals)) {
                    printf("delete mark[%d];", i);
                  }
                }
              } else {
                printf("split(\"\",mark);");
                for (i=1; i<=NR; i++) {
                  if (i SUBSEP 2 in cell) {
                    printf("if(%s>%s){for(i=%s;i<=%s;i++){mark[i]=1}}else{for(i=%s;i<=%s;i++){mark[i]=1}}",
                           cell[i,1],cell[i,2],
                           cell[i,2],cell[i,1],
                           cell[i,1],cell[i,2]);
                  } else {
                    if (match(cell[i,1],/^[0-9]+$/) || (cell[i,1] == "NF")) {
                      printf("mark[%s]=1;",cell[i,1]);
                    } else {
                      printf("if(%s>0){mark[%s]=1}",cell[i,1],cell[i,1]);
                    }
                  }
                }
              }
              printf("convert_marked_flds();print;");
            }
          '                                         )
  echo "$awkc0" | grep 'NF' >/dev/null
  if [ $? -ne 0 ]; then
    awkc0b=${awkc0%convert_marked_flds*}
    awkc0='convert_marked_flds();print;'
  else
    awkc0b=''
  fi
else
  awkc0='print utf8han2zen($0);'
  awkc0b=''
fi

# make awk code
awkcode='
BEGIN {
  for (i=0; i<hdr_skip; i++) {
    if (getline line) {
      print line;
    } else {
      exit;
    }
  }
  utf8han2zen_prep();
  '"$awkc0b"'
}
{
  '"$awkc0"'
}
function convert_marked_flds( fld) {
  for (fld in mark) {
    $fld = utf8han2zen($fld);
  }
}
function utf8han2zen_prep() {

  # register some character codes
  chr_20=sprintf("\040"); chr_7F=sprintf("\177"); chr_80=sprintf("\200");
  chr_85=sprintf("\205"); chr_8A=sprintf("\212"); chr_8F=sprintf("\217");
  chr_9E=sprintf("\236"); chr_9F=sprintf("\237"); chr_A0=sprintf("\240");
  chr_A1=sprintf("\241"); chr_B6=sprintf("\266"); chr_BD=sprintf("\275");
  chr_BE=sprintf("\276"); chr_C0=sprintf("\300"); chr_E0=sprintf("\340");
  chr_EF=sprintf("\357"); chr_F0=sprintf("\360"); chr_F8=sprintf("\370");
  chr_FC=sprintf("\374"); chr_FE=sprintf("\376");

  # memorize all of the transforming letters
  h2za[" "]="　";  h2za["!"]="！";  h2za["\""]="”"; h2za["#"]="＃";
  h2za["$"]="＄";  h2za["%"]="％";  h2za["&"]="＆";  h2za["'"'"'"]="’";
  h2za["("]="（";  h2za[")"]="）";  h2za["*"]="＊";  h2za["+"]="＋";
  h2za[","]="，";  h2za["-"]="－";  h2za["."]="．";  h2za["/"]="／";
  h2za["0"]="０";  h2za["1"]="１";  h2za["2"]="２";  h2za["3"]="３";
  h2za["4"]="４";  h2za["5"]="５";  h2za["6"]="６";  h2za["7"]="７";
  h2za["8"]="８";  h2za["9"]="９";  h2za[":"]="：";  h2za[";"]="；";
  h2za["<"]="＜";  h2za["="]="＝";  h2za[">"]="＞";  h2za["?"]="？";
  h2za["@"]="＠";  h2za["A"]="Ａ";  h2za["B"]="Ｂ";  h2za["C"]="Ｃ";
  h2za["D"]="Ｄ";  h2za["E"]="Ｅ";  h2za["F"]="Ｆ";  h2za["G"]="Ｇ";
  h2za["H"]="Ｈ";  h2za["I"]="Ｉ";  h2za["J"]="Ｊ";  h2za["K"]="Ｋ";
  h2za["L"]="Ｌ";  h2za["M"]="Ｍ";  h2za["N"]="Ｎ";  h2za["O"]="Ｏ";
  h2za["P"]="Ｐ";  h2za["Q"]="Ｑ";  h2za["R"]="Ｒ";  h2za["S"]="Ｓ";
  h2za["T"]="Ｔ";  h2za["U"]="Ｕ";  h2za["V"]="Ｖ";  h2za["W"]="Ｗ";
  h2za["X"]="Ｘ";  h2za["Y"]="Ｙ";  h2za["Z"]="Ｚ";  h2za["["]="［";
  h2za["\\"]="＼"; h2za["]"]="］";  h2za["^"]="＾";  h2za["_"]="＿";
  h2za["`"]="‘";  h2za["a"]="ａ";  h2za["b"]="ｂ";  h2za["c"]="ｃ";
  h2za["d"]="ｄ";  h2za["e"]="ｅ";  h2za["f"]="ｆ";  h2za["g"]="ｇ";
  h2za["h"]="ｈ";  h2za["i"]="ｉ";  h2za["j"]="ｊ";  h2za["k"]="ｋ";
  h2za["l"]="ｌ";  h2za["m"]="ｍ";  h2za["n"]="ｎ";  h2za["o"]="ｏ";
  h2za["p"]="ｐ";  h2za["q"]="ｑ";  h2za["r"]="ｒ";  h2za["s"]="ｓ";
  h2za["t"]="ｔ";  h2za["u"]="ｕ";  h2za["v"]="ｖ";  h2za["w"]="ｗ";
  h2za["x"]="ｘ";  h2za["y"]="ｙ";  h2za["z"]="ｚ";  h2za["{"]="｛";
  h2za["|"]="｜";  h2za["}"]="｝";  h2za["~"]="～";
                   h2zk["｡"]="。";  h2zk["｢"]="「";  h2zk["｣"]="」";
  h2zk["､"]="、";  h2zk["･"]="・";  h2zk["ｦ"]="ヲ";  h2zk["ｧ"]="ァ";
  h2zk["ｨ"]="ィ";  h2zk["ｩ"]="ゥ";  h2zk["ｪ"]="ェ";  h2zk["ｫ"]="ォ";
  h2zk["ｬ"]="ャ";  h2zk["ｭ"]="ュ";  h2zk["ｮ"]="ョ";  h2zk["ｯ"]="ッ";
  h2zk["ｰ"]="ー";  h2zk["ｱ"]="ア";  h2zk["ｲ"]="イ";  h2zk["ｳ"]="ウ";
  h2zk["ｴ"]="エ";  h2zk["ｵ"]="オ";  h2zk["ｶ"]="カ";  h2zk["ｷ"]="キ";
  h2zk["ｸ"]="ク";  h2zk["ｹ"]="ケ";  h2zk["ｺ"]="コ";  h2zk["ｻ"]="サ";
  h2zk["ｼ"]="シ";  h2zk["ｽ"]="ス";  h2zk["ｾ"]="セ";  h2zk["ｿ"]="ソ";
  h2zk["ﾀ"]="タ";  h2zk["ﾁ"]="チ";  h2zk["ﾂ"]="ツ";  h2zk["ﾃ"]="テ";
  h2zk["ﾄ"]="ト";  h2zk["ﾅ"]="ナ";  h2zk["ﾆ"]="ニ";  h2zk["ﾇ"]="ヌ";
  h2zk["ﾈ"]="ネ";  h2zk["ﾉ"]="ノ";  h2zk["ﾊ"]="ハ";  h2zk["ﾋ"]="ヒ";
  h2zk["ﾌ"]="フ";  h2zk["ﾍ"]="ヘ";  h2zk["ﾎ"]="ホ";  h2zk["ﾏ"]="マ";
  h2zk["ﾐ"]="ミ";  h2zk["ﾑ"]="ム";  h2zk["ﾒ"]="メ";  h2zk["ﾓ"]="モ";
  h2zk["ﾔ"]="ヤ";  h2zk["ﾕ"]="ユ";  h2zk["ﾖ"]="ヨ";  h2zk["ﾗ"]="ラ";
  h2zk["ﾘ"]="リ";  h2zk["ﾙ"]="ル";  h2zk["ﾚ"]="レ";  h2zk["ﾛ"]="ロ";
  h2zk["ﾜ"]="ワ";  h2zk["ﾝ"]="ン";  h2zk["ﾞ"]="゛";  h2zk["ﾟ"]="゜";
  h2zd["ｶﾞ"]="ガ"; h2zd["ｷﾞ"]="ギ"; h2zd["ｸﾞ"]="グ"; h2zd["ｹﾞ"]="ゲ";
  h2zd["ｺﾞ"]="ゴ"; h2zd["ｻﾞ"]="ザ"; h2zd["ｼﾞ"]="ジ"; h2zd["ｽﾞ"]="ズ";
  h2zd["ｾﾞ"]="ゼ"; h2zd["ｿﾞ"]="ゾ"; h2zd["ﾀﾞ"]="ダ"; h2zd["ﾁﾞ"]="ヂ";
  h2zd["ﾂﾞ"]="ヅ"; h2zd["ﾃﾞ"]="デ"; h2zd["ﾄﾞ"]="ド"; h2zd["ﾊﾞ"]="バ";
  h2zd["ﾋﾞ"]="ビ"; h2zd["ﾌﾞ"]="ブ"; h2zd["ﾍﾞ"]="ベ"; h2zd["ﾎﾞ"]="ボ";
  h2zd["ﾊﾟ"]="パ"; h2zd["ﾋﾟ"]="ピ"; h2zd["ﾌﾟ"]="プ"; h2zd["ﾍﾟ"]="ペ";
  h2zd["ﾎﾟ"]="ポ"; h2zd["ｳﾞ"]="ヴ"; h2zd["ﾜﾞ"]="ヷ"; h2zd["ｦﾞ"]="ヺ";
}

function utf8han2zen(s_in, i,s,s0,s1,s2,s_out) {
  s_out = "";
  s0    = "";   # 濁音の可能性がある文字が入る一時バッファ
  for (i=1; i<=length(s_in); i++) {
    s = substr(s_in,i,1);
    if (s0 == "") {
      # a. 一時バッファに溜まってない場合
      if        (s < chr_80) {
        # a-1. 1バイト文字の場合
        '$kanaonly'if ((s >= chr_20) && (s < chr_7F)) {
        '$kanaonly'  # a-1-1. 全角に変換できる場合
        '$kanaonly'  s_out = s_out h2za[s];
        '$kanaonly'} else {
        '$kanaonly'  # a-1-2. 全角に変換できない場合
          s_out = s_out s;
        '$kanaonly'}
      } else if (s < chr_C0) {
        # a-x1. 不正なUTF-8先頭バイト
        s_out = s_out s;
      } else if (s < chr_E0) {
        # a-2. 2バイト文字の場合
        i++;
        s_out = s_out s substr(s_in,i,1);
      } else if (s < chr_F0) {
        # a-3. 3バイト文字の場合
        s1 = substr(s_in,i+1,1);
        s2 = substr(s_in,i+2,1);
        # === 半角カナ→全角カナ変換 =================================
        if        (s == chr_EF) {
          # a-3-1. 先頭がEFで始まる場合
          if        (s1 == chr_BD) {
            # a-3-1-1. 2バイト目がBDの場合
            if        ((s2 >= chr_A1) && (s2 < chr_B6)) {
              # a-3-1-1-1. 3バイト目がA1～B5の場合
              s_out = s_out h2zk[s s1 s2]; # <<< 。「」、・ア～オ(清音のみ)
            } else if ((s2 >= chr_B6) && (s2 < chr_C0)) {
              # a-3-1-1-2. 3バイト目がB6～BFの場合
              s0 = s s1 s2;                # <<< カ～ソ(濁音の可能性も)
            } else {
              # a-3-1-1-3. 3バイト目がA1～BF以外の場合
              s_out = s_out s s1 s2;
            }
          } else if (s1 == chr_BE) {
            # a-3-1-2. 2バイト目がBEの場合
            if        (((s2 >= chr_80) && (s2 < chr_85)) ||
                       ((s2 >= chr_8A) && (s2 < chr_8F))   ) {
              # a-3-1-2-1. 3バイト目が80～84,8A～8Eの場合
              s0 = s s1 s2;                # <<< タ～ト,ハ～ホ(濁音の可能性も)
            } else if ( (s2 >= chr_85) && (s2 < chr_A0)    ) {
              # a-3-1-2-2. 3バイト目が85～89,8F～9Fの場合
              s_out = s_out h2zk[s s1 s2]; # <<< ナ～ノ、マ～ン(清音のみ)
            } else {
              # a-3-1-2-3. 3バイト目がA1～BF以外の場合
              s_out = s_out s s1 s2;
            }
          } else {
            # a-3-1-3. 2バイト目がBD,BEでない場合
            s_out = s_out s s1 s2;
          }
        } else {
          # a-3-2. 先頭がEF以外で始まる場合
          s_out = s_out s s1 s2;
        }
        # ============================================================
        i += 2;
      } else if (s < chr_F8) {
        # a-4. 4バイト文字の場合
        s_out = s_out s substr(s_in,i+1,3);
        i += 3;
      } else if (s < chr_FC) {
        # a-5. 5バイト文字の場合
        s_out = s_out s substr(s_in,i+1,4);
        i += 4;
      } else if (s < chr_FE) {
        # a-6. 6バイト文字の場合
        s_out = s_out s substr(s_in,i+1,5);
        i += 5;
      } else {
        # a-x2. 不正なUTF-8先頭バイト
        s_out = s_out s;
      }
    } else {
      # b. 一時バッファに溜まっている場合
      if        (s < chr_80) {
        # b-1. 1バイト文字の場合
        '$kanaonly'if ((s >= chr_20) && (s < chr_7F)) {
        '$kanaonly'  # b-1-1. 全角に変換できる場合
        '$kanaonly'  s_out = s_out h2zk[s0] h2za[s];
        '$kanaonly'} else {
        '$kanaonly'  # b-1-2. 全角に変換できない場合
          s_out = s_out h2zk[s0] s;
        '$kanaonly'}
        s0 = "";
      } else if (s < chr_C0) {
        # b-x1. 不正なUTF-8先頭バイト
        s_out = s_out h2zk[s0] s;
        s0 = "";
      } else if (s < chr_E0) {
        # b-2. 2バイト文字の場合
        i++;
        s_out = s_out h2zk[s0] s substr(s_in,i,1);
        s0 = "";
      } else if (s < chr_F0) {
        # a-3. 3バイト文字の場合
        s1 = substr(s_in,i+1,1);
        s2 = substr(s_in,i+2,1);
        # === 半角カナ→全角カナ変換 =================================
        if        (s == chr_EF) {
          # b-3-1. 先頭がEFで始まる場合
          if        (s1 == chr_BD) {
            # b-3-1-1. 2バイト目がBDの場合
            if        ((s2 >= chr_A1) && (s2 < chr_B6)) {
              # b-3-1-1-1. 3バイト目がA1～B5の場合
              s_out = s_out h2zk[s0] h2zk[s s1 s2]; # <<< 。「」、・ア～オ(清音)
              s0 = "";
            } else if ((s2 >= chr_B6) && (s2 < chr_C0)) {
              # b-3-1-1-2. 3バイト目がB6～BFの場合
              s_out = s_out h2zk[s0];               # <<< カ～ソ(濁音の可能性も)
              s0 = s s1 s2;
            } else {
              # b-3-1-1-3. 3バイト目がA1～BF以外の場合
              s_out = s_out h2zk[s0] s s1 s2;
              s0 = "";
            }
          } else if (s1 == chr_BE) {
            # b-3-1-2. 2バイト目がBEの場合
            if         ((s2 == chr_9E) || (s2 == chr_9F)   ) {
              # b-3-1-2-1. 3バイト目が9E,9Fの場合
              s_out = s_out h2zd[s0 s s1 s2];       # <<< 濁点・半濁点
              s0 = "";
            } else if (((s2 >= chr_80) && (s2 < chr_85)) ||
                       ((s2 >= chr_8A) && (s2 < chr_8F))   ) {
              # b-3-1-2-2. 3バイト目が80～84,8A～8Eの場合
              s_out = s_out h2zk[s0];        # <<< タ～ト,ハ～ホ(濁音の可能性も)
              s0 = s s1 s2;
            } else if ( (s2 >= chr_85) && (s2 < chr_9E)    ) {
              # b-3-1-2-3. 3バイト目が85～89,8F～9Dの場合
              s_out = s_out h2zk[s0] h2zk[s s1 s2]; # <<< ナ～ノ、マ～ン(清音)
              s0 = "";
            } else {
              # b-3-1-2-4. 3バイト目がA1～BF以外の場合
              s_out = s_out h2zk[s0] s s1 s2;
              s0 = "";
            }
          } else {
            # b-3-1-3. 2バイト目がBD,BEでない場合
            s_out = s_out h2zk[s0] s s1 s2;
            s0 = "";
          }
        } else {
          # b-3-2. 先頭がEF以外で始まる場合
          s_out = s_out h2zk[s0] s s1 s2;
          s0 = "";
        }
        # ============================================================
        i += 2;
      } else if (s < chr_F8) {
        # a-4. 4バイト文字の場合
        s_out = s_out h2zk[s0] s substr(s_in,i+1,3);
        s0 = "";
        i += 3;
      } else if (s < chr_FC) {
        # a-5. 5バイト文字の場合
        s_out = s_out h2zk[s0] s substr(s_in,i+1,4);
        s0 = "";
        i += 4;
      } else if (s < chr_FE) {
        # a-6. 6バイト文字の場合
        s_out = s_out h2zk[s0] s substr(s_in,i+1,5);
        s0 = "";
        i += 5;
      } else {
        # a-x2. 不正なUTF-8先頭バイト
        s_out = s_out h2zk[s0] s;
        s0 = "";
      }
    }
  }
  if (s0 != "") {
    s_out = s_out h2zk[s0];
  }
  return s_out;
}
'

# main
if [ $directmode -ne 0 ]; then
       printf '%s' "$directstr"               |
       env -i awk -v hdr_skip=$hopt "$awkcode"
else
  exec env -i awk -v hdr_skip=$hopt "$awkcode" "$file"
fi
